@page "/employees"

@using Management
@using Management.Inputs
@using MudBlazor
@using Management.Outputs

@inject IEmployeeSdk employeeSdk
@inject NavigationManager Navigation
@inject IDialogService DialogService

<PageTitle>Employees</PageTitle>

<MudContainer Class="d-flex justify-center align-center" Style="height: 100vh; margin-top: 20px;">
    <MudGrid Justify="Justify.Center" AlignItems="AlignItems.Center">
        <MudItem xs="12" sm="8" md="6" lg="12">
            <MudPaper Class="pa-4">
                <MudText Typo="Typo.h3" Align="Align.Center" Class="mb-4" Style="color: black; text-shadow: 2px 2px 4px rgba(0, 0, 0, 0.3);">Employees</MudText>

                <div class="d-flex justify-content-between align-items-center mb-4">
                    <MudTextField T="string" Counter="25" HelperText="This field uses Counter prop"
                                  Immediate="true"
                                  Validation="@(new Func<string, IEnumerable<string>>(MaxCharacters))"
                                  Label="Regular"
                                  Variant="Variant.Text"
                                  Style="flex-grow: 1;" /> 

                    <MudButton Variant="Variant.Filled"
                               Color="Color.Primary"
                               OnClick="() => SearchEmployee()"
                               Class="ml-2">Search</MudButton>
                </div>

                <MudTable Items="filteredEmployees" Striped="true" Hover="true" Bordered="true" Breakpoint="Breakpoint.Md">
                    <HeaderContent>
                        <MudTh>ID</MudTh>
                        <MudTh>Name</MudTh>
                        <MudTh>Apellido</MudTh>
                        <MudTh>DUI</MudTh>
                        <MudTh>Actions</MudTh>
                    </HeaderContent>
                    <RowTemplate>
                        <MudTd DataLabel="ID">@context.Id</MudTd>
                        <MudTd DataLabel="Name">@context.FirstName</MudTd>
                        <MudTd DataLabel="Apellido">@context.LastName</MudTd>
                        <MudTd DataLabel="DUI">@context.Dui</MudTd>
                        <MudTd DataLabel="Actions">
                            <MudButton Variant="Variant.Filled" Color="Color.Primary" OnClick="@(() => EditEmployee(@context.Id))">Edit</MudButton>
                            <MudButton Variant="Variant.Filled" Color="Color.Error" OnClick="@(() => OnEmployeeDeleted(@context.Id))">Delete</MudButton>
                        </MudTd>
                    </RowTemplate>
                </MudTable>
            </MudPaper>
        </MudItem>
    </MudGrid>
</MudContainer>

<CascadingValue Value="EditEmployee">
    <EditModal />
</CascadingValue>

<CascadingValue Value="OnEmployeeDeleted">
    <DeleteModals />
</CascadingValue>
@code {
    private List<EmployeeOutput> employees = new List<EmployeeOutput>();
    private List<EmployeeOutput> filteredEmployees = new List<EmployeeOutput>();
    private string? searchText;
    private string? employeeIdToDelete;

    private bool isTableVisible = true;
    
    private IEnumerable<string> MaxCharacters(string ch)
    {
        if (!string.IsNullOrEmpty(ch) && 25 < ch?.Length)
            yield return "Max 25 characters";
    }

    protected override async Task OnInitializedAsync()
    {
        await GetAllEmployeesWithoutFilter();
    }

    public async Task GetAllEmployeesWithoutFilter()
    {
        List<EmployeeOutput> allEmployees = new List<EmployeeOutput>();
        int page = 1;
        int pageSize = 10;
        string nameFilter = null;

       
            var filter = new EmployeeGetFilter(
                NameContains: string.IsNullOrEmpty(nameFilter) ? null : nameFilter,
                Page: page,
                ItemsPerPage: pageSize
                );

         var paginatedEmployees = await employeeSdk.GetEmployeesByFilter(filter);               

        filteredEmployees = allEmployees;
        //StateHasChanged();
    }

    private async Task SearchEmployee()
    {
        if (!string.IsNullOrEmpty(searchText))
        {
            var filter = new EmployeeGetFilter(
                NameContains: searchText,
                Page: 1,
                ItemsPerPage: 10
            );

            
                var paginatedEmployees = await employeeSdk.GetEmployeesByFilter(filter);
                filteredEmployees = paginatedEmployees.Items.ToList();           
                Console.WriteLine($"empleado encontradocon el nombre {searchText}");
        }   
       
        StateHasChanged();
    }

    private async Task EditEmployee(string employeeId)
    {       
        // Ocultar la tabla cuando se hace clic en Edit
        isTableVisible = false;

        var employee = await employeeSdk.GetEmployee(employeeId);

            var parameters = new DialogParameters
            {
                { "model", employee }
            };

            //var options = new DialogOptions { CloseOnEscapeKey = true };

        
            var EditedDialog = await DialogService.ShowAsync<EditModal>("Update Employee", parameters);
            var result = await EditedDialog.Result;

            if (!result!.Canceled)
            {
                await GetAllEmployeesWithoutFilter();
            }
        isTableVisible = true;
    }


    private async Task OnEmployeeDeleted(string employeeId)
    {
        var parameters = new DialogParameters
        {
            { "EmployeeId", employeeId }
        };

        //var options = new DialogOptions { CloseOnEscapeKey = true };

        var deleteDialog = await DialogService.ShowAsync<DeleteModals>("Delete Employee", parameters);
        var result = await deleteDialog.Result;

        if (!result!.Canceled)
        {
           await GetAllEmployeesWithoutFilter();
        }
    }  
}