@page "/employees"

@using Management
@using Management.Inputs
@using MudBlazor
@using Management.Outputs
@using UsersManagementsEmployees.Web.Components.ViewModels

@inject IEmployeeSdk employeeSdk
@inject NavigationManager Navigation
@inject IDialogService DialogService


<NavMenuR />
<div class="container-fluid" style="margin-left: 250px; padding-top: 60px;">
    <PageTitle>Employees</PageTitle>

    <MudContainer class="d-flex justify-content-center align-items-center" style="height: 100%;">
        <MudGrid Justify="Justify.Center" AlignItems="AlignItems.Center">
            <MudItem xs="12" sm="8" md="6" lg="12">
                <MudPaper Class="pa-4">
                    <MudText Typo="Typo.h3" Align="Align.Center" Class="mb-4" Style="color: black; text-shadow: 2px 2px 4px rgba(0, 0, 0, 0.3);">Employees</MudText>
                    <SearchBar SearchBarVM=searchBarVM OnSearch=NavigateTo />
                    <MudButton Variant="Variant.Filled" OnClick="(e => Create())" Color="Color.Secondary" Class="ml-2">Add Employee</MudButton>
                    @if (Employees != null)
                    {
                        <MudTable Items="Employees.Items" Striped="true" Hover="true" Bordered="true" Breakpoint="Breakpoint.Md">
                            <HeaderContent>
                                <MudTh>ID</MudTh>
                                <MudTh>Name</MudTh>
                                <MudTh>Apellido</MudTh>
                                <MudTh>DUI</MudTh>
                                <MudTh>Actions</MudTh>
                            </HeaderContent>
                            <RowTemplate>
                                <MudTd DataLabel="ID">@context.Id</MudTd>
                                <MudTd DataLabel="Name">@context.FirstName</MudTd>
                                <MudTd DataLabel="Apellido">@context.LastName</MudTd>
                                <MudTd DataLabel="DUI">@context.Dui</MudTd>
                                <MudTd DataLabel="Actions">
                                    <MudButton Variant="Variant.Filled" Color="Color.Primary" OnClick="@(() => EditEmployee(@context))">Edit</MudButton>
                                    <MudButton Variant="Variant.Filled" Color="Color.Error" OnClick="@(() => OnEmployeeDeleted(@context.Id))">Delete</MudButton>
                                </MudTd>
                            </RowTemplate>
                        </MudTable>
                    }
                </MudPaper>
            </MudItem>
        </MudGrid>
    </MudContainer>
</div>


@code {
    private PaginatedListOutput<EmployeeOutput>? Employees = null;
    SearchBarVM searchBarVM = new SearchBarVM();

    [SupplyParameterFromQuery]
    [Parameter]
    public string Name { get; set; }

    public async Task GetAllEmployeesWithoutFilter()
    {
        int page = 1;
        int pageSize = 10;
        string nameFilter = null;


        var filter = new EmployeeGetFilter(
            NameContains: searchBarVM.NameContains,
            Page: page,
            ItemsPerPage: pageSize
            );

        Employees = await employeeSdk.GetEmployeesByFilter(filter);
    }

    private async Task Create()
    {
        var dialogResul = await DialogService.Show<CreateEmployeeModal>("Create Employee").Result;
        if (dialogResul.Canceled)
        {
            return;
        }
        ;
        if (dialogResul.Data is EmployeeVM newEmployee)
        {
            var employeeCreationData = new EmployeeCreationData
            (
                newEmployee.Id,
                newEmployee.FirstName,
                newEmployee.LastName,
                newEmployee.Dui
            );

            var createdEmployee = await employeeSdk.Create(employeeCreationData);

            await GetAllEmployeesWithoutFilter();
            StateHasChanged();
        }
    }
    private async Task EditEmployee(EmployeeOutput employee)
    {
        var parameters = new DialogParameters
    {
        { "EmployeeOutput", employee }
    };
        var EditedDialog = await DialogService.ShowAsync<EditModal>("Update Employee", parameters);
        var result = await EditedDialog.Result;

        if (result == null || result.Canceled)
        {
            Console.WriteLine("El diálogo se cerró sin devolver un resultado.");
            return;
        }
        if (result.Canceled)
        {
            Console.WriteLine("El diálogo fue cancelado.");
            return;
        }

        await GetAllEmployeesWithoutFilter();
    }


    private async Task OnEmployeeDeleted(string employeeId)
    {
        var parameters = new DialogParameters
        {
            { "EmployeeId", employeeId }
        };

        var deleteDialog = await DialogService.ShowAsync<DeleteModals>("Delete Employee", parameters);
        var result = await deleteDialog.Result;

        if (!result!.Canceled)
        {
            await GetAllEmployeesWithoutFilter();
        }
    }

    private void NavigateTo()
    {
        var uriWithOutQry = new Uri(Navigation.Uri).GetLeftPart(UriPartial.Path) + "?";

        var queryParams = new List<string>();

        if (!string.IsNullOrEmpty(searchBarVM.NameContains))
            queryParams.Add($"Name={searchBarVM.NameContains}");

        uriWithOutQry += $"{string.Join("&", queryParams)}";

        Navigation.NavigateTo(uriWithOutQry.TrimEnd('?'));
    }

    protected override async Task OnParametersSetAsync()
    {
        SetVm();
        await GetAllEmployeesWithoutFilter();


        await base.OnParametersSetAsync();
        StateHasChanged();
    }

    void SetVm()
    {
        searchBarVM = new()
            {
                NameContains = Name
            };
    }





}